reading = as.numeric(gsub(",", ".", reading)))
# Date CET/CEST referes to winter-/summer-time
energy$ndate <- as.POSIXct(strptime(energy$time,"%d-%m-%Y %H.%M"))
## Interpolate at x.inter
df_uniq <- unique(energy$time)
length(df_uniq)
energy
#### Introduction ####
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(car)
library(stringr)
library(xtable)
load("./WUndergroundHourly.RData")
# Remove all columns without data (only NA columns)
clima <- select(WG,!c("wind_gust"  , "wind_chill",
"heat_index" , "precip",
"precip_rate", "precip_total"))
# Remove columns with fixed values
clima <- select(clima, !c("hail","thunder","tornado"))
# making seperate column for date and time
clima[c('date','time')] <- str_split_fixed(clima$date,' ',2)
# Picking the correct datatype for the columns
clima <- mutate(clima,
across(c(dir, cond, fog, rain, snow, date, time),factor)
)
### Finding mode and mean for each date ###
clima_by_date <- group_by(clima, date)
# Define function to calculate mode
mode <- function(factors){
max <- factors %>%
table() %>%
which.max() %>%
as.data.frame() %>%
rownames() %>%
factor()
# If it does not have a value set it to None for clarity
if (max == ""){
return(factor("None"))}
else {
return(max)
}
}
# Assign the mode and mean using aggregate functions
clima_mean_mode <- clima_by_date %>%
summarise(
across(c(dir, cond, fog, rain, snow),mode),
across(c(temp, dew_pt, hum, wind_spd, vis, pressure), ~mean(.,na.rm=T))
)
#### Read in the energy performance of the building ####
# Find all the files in ./data
data_files <- dir("./data", full.names=T)
# Read them into a single dataframe
# \x00 is set to be ignored  since it for some reason is at the end of each file
energy <- NULL
for (i in seq_along(data_files)){
data <- read.table(data_files[i], sep=";", skipNul=TRUE) %>%
select(V1, V2, V4)
energy <- bind_rows(energy, data)
}
# Renaming the dataframe
energy <- energy %>%
rename(id=V1, time=V2, reading=V4)
## Exclude meters with less than 121 records
# find the records with 121 records
id_to_keep <- group_by(energy, id) %>%
summarise(n=n()) %>%
filter(n==121)
# only keep these
energy <- filter(energy, id %in% id_to_keep$id)
# set the correct datatypes
energy <- mutate(energy,
reading = as.numeric(gsub(",", ".", reading)))
# Date CET/CEST referes to winter-/summer-time
energy$time <- as.POSIXct(strptime(energy$time,"%d-%m-%Y %H.%M"))
energy
approx(energy$time,energy$reading,xout=as.POSIXct("2018-09-02 02:01:00"))
approx(energy$time,energy$reading,xout=as.POSIXct("2018-09-02 02:01:00"))
## Interpolate at x.inter
df_uniq <- unique(energy$time)
df_uniq
unique_days <-
energy$time
## Interpolate at x.inter
df_uniq <- unique(energy$time)
unique_days <-
energy$time
as.Date
unique_days <-
energy$time
energy$time
as.Date(energy$time)
unique(as.Date(energy$time))
str(energy)
unique_dats
unique_days
unique_days
# Get all unique days
unique_days <- unique(as.Date(energy$time))
unique_days
# Get all unique days
unique_days <- unique(as.Date(energy$time))
time <- "11:59:00"
time_to_interpolate <- NULL
mutate(unique_days <- paste(unique_days, time))
# Get all unique days
unique_days <- unique(as.Date(energy$time))
time <- "11:59:00"
mutate(unique_days <- paste(unique_days, time))
time <-
mutate(unique_days <- paste(unique_days, "11:59:00"))
mutate(unique_days, unique_days=paste(unique_days, "11:59:00"))
unique_days <- unique(as.Date(energy$time))
mutate(unique_days, unique_days=paste(unique_days, "11:59:00"))
mutate(unique_days, unique_days=paste(unique_days, "11:59:00"))
# Get all unique days
unique_days <- unique(as.Date(energy$time)) %>%
as.data.frame()
mutate(unique_days, unique_days=paste(unique_days, "11:59:00"))
# Get all unique days
unique_days <- unique(as.Date(energy$time)) %>%
as.data.frame()
unique_dats
unique_days
mutate(unique_days, unique_time=paste(unique_days, "11:59:00"))
# Get all unique days
unique_days <- unique(as.Date(energy$time))
apply(unique_days, paste)
apply(unique_days,2, paste)
apply(unique_days,1, paste)
# Get all unique days
unique <- data.frame()
mutate(unique, time = "11:59:00")
time
unique
unique <- data.frame()
unique$days <- unique(as.Date(energy$time))
rep(10,"11:59:00")
rep("11:59:00",10)
unique$time <- rep("11:59:00",length(unique$days))
unique
unique <- data.frame()
unique$days <- unique(as.Date(energy$time))
rep("11:59:00",length(unique$days))
rep("11:59:00",nrow(unique$days))
nrow(unique$days)
unique$days
# Get all unique days
unique <- data.frame()
unique$days <- unique(as.Date(energy$time))
#### Introduction ####
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(car)
library(stringr)
library(xtable)
load("./WUndergroundHourly.RData")
# Remove all columns without data (only NA columns)
clima <- select(WG,!c("wind_gust"  , "wind_chill",
"heat_index" , "precip",
"precip_rate", "precip_total"))
# Remove columns with fixed values
clima <- select(clima, !c("hail","thunder","tornado"))
# making seperate column for date and time
clima[c('date','time')] <- str_split_fixed(clima$date,' ',2)
# Picking the correct datatype for the columns
clima <- mutate(clima,
across(c(dir, cond, fog, rain, snow, date, time),factor)
)
### Finding mode and mean for each date ###
clima_by_date <- group_by(clima, date)
# Define function to calculate mode
mode <- function(factors){
max <- factors %>%
table() %>%
which.max() %>%
as.data.frame() %>%
rownames() %>%
factor()
# If it does not have a value set it to None for clarity
if (max == ""){
return(factor("None"))}
else {
return(max)
}
}
# Assign the mode and mean using aggregate functions
clima_mean_mode <- clima_by_date %>%
summarise(
across(c(dir, cond, fog, rain, snow),mode),
across(c(temp, dew_pt, hum, wind_spd, vis, pressure), ~mean(.,na.rm=T))
)
#### Read in the energy performance of the building ####
# Find all the files in ./data
data_files <- dir("./data", full.names=T)
# Read them into a single dataframe
# \x00 is set to be ignored  since it for some reason is at the end of each file
energy <- NULL
for (i in seq_along(data_files)){
data <- read.table(data_files[i], sep=";", skipNul=TRUE) %>%
select(V1, V2, V4)
energy <- bind_rows(energy, data)
}
# Renaming the dataframe
energy <- energy %>%
rename(id=V1, time=V2, reading=V4)
## Exclude meters with less than 121 records
# find the records with 121 records
id_to_keep <- group_by(energy, id) %>%
summarise(n=n()) %>%
filter(n==121)
# only keep these
energy <- filter(energy, id %in% id_to_keep$id)
# set the correct datatypes
energy <- mutate(energy,
reading = as.numeric(gsub(",", ".", reading)))
# Date CET/CEST refers to winter-/summer-time
energy$time <- as.POSIXct(strptime(energy$time,"%d-%m-%Y %H.%M"))
# Get all unique days
unique$days <- unique(as.Date(energy$time))
# Get all unique days
unique$days <- unique(as.Date(energy$time))
#### Introduction ####
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(car)
library(stringr)
library(xtable)
load("./WUndergroundHourly.RData")
# Remove all columns without data (only NA columns)
clima <- select(WG,!c("wind_gust"  , "wind_chill",
"heat_index" , "precip",
"precip_rate", "precip_total"))
# Remove columns with fixed values
clima <- select(clima, !c("hail","thunder","tornado"))
# making seperate column for date and time
clima[c('date','time')] <- str_split_fixed(clima$date,' ',2)
# Picking the correct datatype for the columns
clima <- mutate(clima,
across(c(dir, cond, fog, rain, snow, date, time),factor)
)
### Finding mode and mean for each date ###
clima_by_date <- group_by(clima, date)
# Define function to calculate mode
mode <- function(factors){
max <- factors %>%
table() %>%
which.max() %>%
as.data.frame() %>%
rownames() %>%
factor()
# If it does not have a value set it to None for clarity
if (max == ""){
return(factor("None"))}
else {
return(max)
}
}
# Assign the mode and mean using aggregate functions
clima_mean_mode <- clima_by_date %>%
summarise(
across(c(dir, cond, fog, rain, snow),mode),
across(c(temp, dew_pt, hum, wind_spd, vis, pressure), ~mean(.,na.rm=T))
)
#### Read in the energy performance of the building ####
# Find all the files in ./data
data_files <- dir("./data", full.names=T)
# Read them into a single dataframe
# \x00 is set to be ignored  since it for some reason is at the end of each file
energy <- NULL
for (i in seq_along(data_files)){
data <- read.table(data_files[i], sep=";", skipNul=TRUE) %>%
select(V1, V2, V4)
energy <- bind_rows(energy, data)
}
# Renaming the dataframe
energy <- energy %>%
rename(id=V1, time=V2, reading=V4)
## Exclude meters with less than 121 records
# find the records with 121 records
id_to_keep <- group_by(energy, id) %>%
summarise(n=n()) %>%
filter(n==121)
# only keep these
energy <- filter(energy, id %in% id_to_keep$id)
# set the correct datatypes
energy <- mutate(energy,
reading = as.numeric(gsub(",", ".", reading)))
# Date CET/CEST refers to winter-/summer-time
energy$time <- as.POSIXct(strptime(energy$time,"%d-%m-%Y %H.%M"))
# Get all unique days
unique$days <- unique(as.Date(energy$time))
# Get all unique days
days <- unique(as.Date(energy$time))
time <- rep("11:59:00",length(unique$days))
time <- rep("11:59:00",length(days))
days
time
i
days <- unique(as.Date(energy$time))
time <- "11:59:00"
for(i in seq_along(days)){
i
}
print(i)
days <- unique(as.Date(energy$time))
time <- "11:59:00"
for(i in seq_along(days)){
print(i)
}
days_time <- paste(days,time)
print(days_time)
days_time <- paste(days,time) %>%
as.POSIXct()
for(i in seq_along(days)){
days_time <- paste(days,time) %>%
as.POSIXct()
}
new_time_date <- bind_rows(new_time_date,days_time)
# Get all unique days
days <- unique(as.Date(energy$time))
time <- "11:59:00"
new_time_date <- NULL
for(i in seq_along(days)){
days_time <- paste(days,time) %>%
as.POSIXct()
new_time_date <- bind_rows(new_time_date,days_time)
}
# Get all unique days
days <- unique(as.Date(energy$time))
time <- "11:59:00"
new_time_date <- NULL
for(i in seq_along(days)){
days_time <- paste(days,time) %>%
as.POSIXct()
new_time_date <- bind_rows(new_time_date, days_time)
}
new_time_date
rlang::last_error()
days <- unique(as.Date(energy$time))
time <- "11:59:00"
new_time_date <- NULL
for(i in seq_along(days)){
days_time <- paste(days,time) %>%
as.POSIXct()
new_time_date <- append(new_time_date, days_time)
}
new_time_date
approx(energy$time, energy$reading, xout=new_time_date)
energy_id <- group_by(energy, id)
energy_by_id <- group_by(energy, id)
energy_by_id
summarise(energy_by_date, mean(reading))
unique(energy$id)
all_id <- unique(energy$id)
energy_for_id <- all_id[1]
all_id <- unique(energy$id)
energy_for_id <- filter(energy, id = all_id[1])
energy_for_id <- filter(energy, id == all_id[1])
energy_for_id
approx(energy_for_id$time, energy$reading, xout=new_time_date)
approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
approx <- approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
approx
str(approx)
all_id <- unique(energy$id)
energy_for_id <- filter(energy, id == all_id[10])
approx <- approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
str(approx)
energy_for_id <- filter(energy, id == all_id[100])
approx <- approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
str(approx)
energy_for_id <- filter(energy, id == all_id[5])
approx <- approx(energy_for_id$time, energy_for_id$reading, xout=new_time_date)
str(approx)
approx$y
approx$x
as.Date(approx$x)
time <- as.Date(approx$x)
reading <- approx$y
reading
id <- rep(all_id[5],length(time))
id
dataframe()
data.frame()
data.frame(a,b)
id_time_cons <- NULL
temp_df <- data.frame(time,id,reading)
temp_df
bind_rows(temp_df,id_time_cons)
id_time_cons <- NULL
all_id <- unique(energy$id)
for (i in seq_along(all_id)){
# select values with the correct id
energy_for_id <- filter(energy, id == all_id[i])
# Approximate new values
approx <- approx(energy_for_id$time,
energy_for_id$reading, xout=new_time_date)
# Assign the new values to a temp df
time <- as.Date(approx$x)
reading <- approx$y
id <- rep(all_id[5],length(time))
temp_df <- data.frame(time,id,reading)
# add them to the id_time_cons df
id_time_cons <- bind_rows(temp_df,id_time_cons)
}
id_time_cons
summary(id_time_cons)
#### Introduction ####
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(car)
library(stringr)
library(xtable)
load("./WUndergroundHourly.RData")
# Remove all columns without data (only NA columns)
clima <- select(WG,!c("wind_gust"  , "wind_chill",
"heat_index" , "precip",
"precip_rate", "precip_total"))
# Remove columns with fixed values
clima <- select(clima, !c("hail","thunder","tornado"))
# making seperate column for date and time
clima[c('date','time')] <- str_split_fixed(clima$date,' ',2)
# Picking the correct datatype for the columns
clima <- mutate(clima,
across(c(dir, cond, fog, rain, snow, date, time),factor)
)
### Finding mode and mean for each date ###
clima_by_date <- group_by(clima, date)
# Define function to calculate mode
mode <- function(factors){
max <- factors %>%
table() %>%
which.max() %>%
as.data.frame() %>%
rownames() %>%
factor()
# If it does not have a value set it to None for clarity
if (max == ""){
return(factor("None"))}
else {
return(max)
}
}
# Assign the mode and mean using aggregate functions
clima_mean_mode <- clima_by_date %>%
summarise(
across(c(dir, cond, fog, rain, snow),mode),
across(c(temp, dew_pt, hum, wind_spd, vis, pressure), ~mean(.,na.rm=T))
)
#### Read in the energy performance of the building ####
# Find all the files in ./data
data_files <- dir("./data", full.names=T)
# Read them into a single dataframe
# \x00 is set to be ignored  since it for some reason is at the end of each file
energy <- NULL
for (i in seq_along(data_files)){
data <- read.table(data_files[i], sep=";", skipNul=TRUE) %>%
select(V1, V2, V4)
energy <- bind_rows(energy, data)
}
# Renaming the dataframe
energy <- energy %>%
rename(id=V1, time=V2, reading=V4)
## Exclude meters with less than 121 records
# find the records with 121 records
id_to_keep <- group_by(energy, id) %>%
summarise(n=n()) %>%
filter(n==121)
# only keep these
energy <- filter(energy, id %in% id_to_keep$id)
# set the correct datatypes
energy <- mutate(energy,
reading = as.numeric(gsub(",", ".", reading)))
# Date CET/CEST refers to winter-/summer-time
energy$time <- as.POSIXct(strptime(energy$time,"%d-%m-%Y %H.%M"))
# Get all unique days
days <- unique(as.Date(energy$time))
time <- "11:59:00"
new_time_date <- NULL
for(i in seq_along(days)){
days_time <- paste(days,time) %>%
as.POSIXct()
new_time_date <- append(new_time_date, days_time)
}
id_time_cons <- NULL
all_id <- unique(energy$id)
for (i in seq_along(all_id)){
# select values with the correct id
energy_for_id <- filter(energy, id == all_id[i])
# Approximate new values
approx <- approx(energy_for_id$time,
energy_for_id$reading, xout=new_time_date)
# Assign the new values to a temp df
time <- as.Date(approx$x)
consumption <- approx$y
id <- rep(all_id[5],length(time))
temp_df <- data.frame(time,id,consumption)
# add them to the id_time_cons df
id_time_cons <- bind_rows(temp_df,id_time_cons)
}
v
warnings()
energy
energy
id_time_cons
